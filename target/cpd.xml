<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="15" tokens="135">
      <file begintoken="17784" column="71" endcolumn="20" endline="131" endtoken="17918"
            line="117"
            path="C:\Users\roberto\IdeaProjects\LDH_PFInal\src\main\java\es\ull\etsii\Ratings\FourthRatings.java"/>
      <file begintoken="18134" column="69" endcolumn="20" endline="184" endtoken="18268"
            line="170"
            path="C:\Users\roberto\IdeaProjects\LDH_PFInal\src\main\java\es\ull\etsii\Ratings\FourthRatings.java"/>
      <codefragment><![CDATA[    ArrayList<String> movies = MovieDatabase.filterBy(new TrueFilter());
    for (String movie_id : movies) {
      int mdid = Integer.parseInt(movie_id);
      if (hasMinRaters(movie_id, minimalRaters, numSimilarRaters, ratingRater)) {
        double sum = 0.0;
        double ave;
        double num = 0.0;
        for (int i = 0; i < numSimilarRaters; i++) {
          Rater rater = RaterDatabase.getRater(ratingRater.get(i).getItem());
          HashMap<String, Rating> movieRated = rater.getMyRatings();
          for (String mo_id : movieRated.keySet()) {
            int rmid = Integer.parseInt(mo_id);
            if (rmid == mdid) {
              sum += ratingRater.get(i).getValue() * rater.getRating(mo_id);
              num += 1;]]></codefragment>
   </duplication>
   <duplication lines="82" tokens="106">
      <file begintoken="9189" column="30" endcolumn="40" endline="241" endtoken="9294"
            line="160"
            path="C:\Users\roberto\IdeaProjects\LDH_PFInal\src\main\java\es\courserajava\edu\duke\FileResource.java"/>
      <file begintoken="13181" column="103" endcolumn="40" endline="155" endtoken="13286"
            line="76"
            path="C:\Users\roberto\IdeaProjects\LDH_PFInal\src\main\java\es\courserajava\edu\duke\URLResource.java"/>
      <codefragment><![CDATA[            initRead(filename);
        }
    }

    /**
     * Allow access to this opened file one line at a time.
     * 
     * @return an <code>Iterable</code> that will allow access to contents of opened file one line
     *         at a time.
     */
    public Iterable<String> lines () {
        return new TextIterable(mySource, "\\n");
    }

    /**
     * Allow access to this opened file one word at a time, where words are separated by
     * white-space. This means any form of spaces, like tabs or newlines, can delimit words.
     * 
     * @return an <code>Iterable</code> that will allow access to contents of opened file one word
     *         at a time.
     */
    public Iterable<String> words () {
        return new TextIterable(mySource, "\\s+");
    }

    /**
     * Return entire contents of this opened file as one string.
     * 
     * @return a <code>String</code> that is the contents of the open file
     */
    public String asString () {
        return mySource;
    }

    /**
     * Returns a <code>CSVParser</code> object to access the contents of an open file.
     * 
     * Each line of the file should be formatted as data separated by commas and with a header row
     * to describe the column names.
     * 
     * @return a <code>CSVParser</code> that can provide access to the records in the file one at a
     *         time
     * @throws ResourceException  if this file does not represent a CSV formatted data
     */
    public CSVParser getCSVParser () {
        return getCSVParser(true);
    }

    /**
     * Returns a <code>CSVParser</code> object to access the contents of an open file, possibly
     * without a header row.
     * 
     * Each line of the file should be formatted as data separated by commas and with/without a
     * header row to describe the column names.
     * 
     * @param withHeader uses first row of data as a header row only if true
     * @return a <code>CSVParser</code> that can provide access to the records in the file one at a
     *         time
     * @throws ResourceException  if this file does not represent a CSV formatted data
     */
    public CSVParser getCSVParser (boolean withHeader) {
        return getCSVParser(withHeader, ",");
    }

    /**
     * Returns a <code>CSVParser</code> object to access the contents of an open file, possibly
     * without a header row and a different data delimiter than a comma.
     * 
     * Each line of the file should be formatted as data separated by the delimiter passed as a
     * parameter and with/without a header row to describe the column names. This is useful if the
     * data is separated by some character other than a comma.
     * 
     * @param withHeader uses first row of data as a header row only if true
     * @param delimiter a single character that separates one field of data from another
     * @return a <code>CSVParser</code> that can provide access to the records in the file one at a
     *         time
     * @throws ResourceException  if this file does not represent a CSV formatted data
     * @throws ResourceException  if <code>delimiter.length() != 1</code>
     */
    public CSVParser getCSVParser (boolean withHeader, String delimiter) {
        if (delimiter == null || delimiter.length() != 1) {
            throw new ResourceException("FileResource: CSV delimiter must be a single character: " + delimiter);]]></codefragment>
   </duplication>
</pmd-cpd>