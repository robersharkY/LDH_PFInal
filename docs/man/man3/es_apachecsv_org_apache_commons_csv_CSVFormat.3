.TH "es.apachecsv.org.apache.commons.csv.CSVFormat" 3 "Thu Dec 29 2022" "Version 1.0" "ProyectoFinalLDH" \" -*- nroff -*-
.ad l
.nh
.SH NAME
es.apachecsv.org.apache.commons.csv.CSVFormat
.SH SYNOPSIS
.br
.PP
.PP
Inherits Serializable\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBPredefined\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "boolean \fBequals\fP (final Object obj)"
.br
.ti -1c
.RI "String \fBformat\fP (final Object\&.\&.\&. values)"
.br
.ti -1c
.RI "boolean \fBgetAllowMissingColumnNames\fP ()"
.br
.ti -1c
.RI "Character \fBgetCommentMarker\fP ()"
.br
.ti -1c
.RI "char \fBgetDelimiter\fP ()"
.br
.ti -1c
.RI "Character \fBgetEscapeCharacter\fP ()"
.br
.ti -1c
.RI "String[] \fBgetHeader\fP ()"
.br
.ti -1c
.RI "String[] \fBgetHeaderComments\fP ()"
.br
.ti -1c
.RI "boolean \fBgetIgnoreEmptyLines\fP ()"
.br
.ti -1c
.RI "boolean \fBgetIgnoreHeaderCase\fP ()"
.br
.ti -1c
.RI "boolean \fBgetIgnoreSurroundingSpaces\fP ()"
.br
.ti -1c
.RI "String \fBgetNullString\fP ()"
.br
.ti -1c
.RI "Character \fBgetQuoteCharacter\fP ()"
.br
.ti -1c
.RI "\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.QuoteMode\fP \fBgetQuoteMode\fP ()"
.br
.ti -1c
.RI "String \fBgetRecordSeparator\fP ()"
.br
.ti -1c
.RI "boolean \fBgetSkipHeaderRecord\fP ()"
.br
.ti -1c
.RI "boolean \fBgetTrailingDelimiter\fP ()"
.br
.ti -1c
.RI "boolean \fBgetTrim\fP ()"
.br
.ti -1c
.RI "int \fBhashCode\fP ()"
.br
.ti -1c
.RI "boolean \fBisCommentMarkerSet\fP ()"
.br
.ti -1c
.RI "boolean \fBisEscapeCharacterSet\fP ()"
.br
.ti -1c
.RI "boolean \fBisNullStringSet\fP ()"
.br
.ti -1c
.RI "boolean \fBisQuoteCharacterSet\fP ()"
.br
.ti -1c
.RI "\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVParser\fP \fBparse\fP (final Reader in)  throws IOException "
.br
.ti -1c
.RI "\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVPrinter\fP \fBprint\fP (final Appendable out)  throws IOException "
.br
.ti -1c
.RI "void \fBprint\fP (final Object value, final Appendable out, final boolean newRecord)  throws IOException "
.br
.ti -1c
.RI "void \fBprintln\fP (final Appendable out)  throws IOException "
.br
.ti -1c
.RI "void \fBprintRecord\fP (final Appendable out, final Object\&.\&.\&. values)  throws IOException "
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithAllowMissingColumnNames\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithAllowMissingColumnNames\fP (final boolean allowMissingColumnNames)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithCommentMarker\fP (final char commentMarker)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithCommentMarker\fP (final Character commentMarker)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithDelimiter\fP (final char delimiter)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithEscape\fP (final char escape)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithEscape\fP (final Character escape)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithFirstRecordAsHeader\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithHeader\fP (final Class<? extends Enum<?> > headerEnum)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithHeader\fP (final ResultSet resultSet)  throws SQLException "
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithHeader\fP (final ResultSetMetaData metaData)  throws SQLException "
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithHeader\fP (final String\&.\&.\&. header)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithHeaderComments\fP (final Object\&.\&.\&. headerComments)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithIgnoreEmptyLines\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithIgnoreEmptyLines\fP (final boolean ignoreEmptyLines)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithIgnoreHeaderCase\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithIgnoreHeaderCase\fP (final boolean ignoreHeaderCase)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithIgnoreSurroundingSpaces\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithIgnoreSurroundingSpaces\fP (final boolean ignoreSurroundingSpaces)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithNullString\fP (final String nullString)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithQuote\fP (final char quoteChar)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithQuote\fP (final Character quoteChar)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithQuoteMode\fP (final \fBQuoteMode\fP quoteModePolicy)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithRecordSeparator\fP (final char recordSeparator)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithRecordSeparator\fP (final String recordSeparator)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithSkipHeaderRecord\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithSkipHeaderRecord\fP (final boolean skipHeaderRecord)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithTrailingDelimiter\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithTrailingDelimiter\fP (final boolean trailingDelimiter)"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithTrim\fP ()"
.br
.ti -1c
.RI "\fBCSVFormat\fP \fBwithTrim\fP (final boolean trim)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBCSVFormat\fP \fBnewFormat\fP (final char delimiter)"
.br
.ti -1c
.RI "static \fBCSVFormat\fP \fBvalueOf\fP (final String \fBformat\fP)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final \fBCSVFormat\fP \fBDEFAULT\fP"
.br
.ti -1c
.RI "static final \fBCSVFormat\fP \fBEXCEL\fP = DEFAULT\&.withIgnoreEmptyLines(false)\&.\fBwithAllowMissingColumnNames\fP()"
.br
.ti -1c
.RI "static final \fBCSVFormat\fP \fBINFORMIX_UNLOAD\fP"
.br
.ti -1c
.RI "static final \fBCSVFormat\fP \fBINFORMIX_UNLOAD_CSV\fP"
.br
.ti -1c
.RI "static final \fBCSVFormat\fP \fBMYSQL\fP"
.br
.ti -1c
.RI "static final \fBCSVFormat\fP \fBRFC4180\fP = DEFAULT\&.withIgnoreEmptyLines(false)"
.br
.ti -1c
.RI "static final \fBCSVFormat\fP \fBTDF\fP = DEFAULT\&.withDelimiter(TAB)\&.\fBwithIgnoreSurroundingSpaces\fP()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Specifies the format of a CSV file and parses input\&.
.PP
.SS "Using predefined formats"
.PP
You can use one of the predefined formats: 
.PP
.PD 0
.IP "\(bu" 2
\fC\fBDEFAULT\fP\fP 
.IP "\(bu" 2
\fC\fBEXCEL\fP\fP 
.IP "\(bu" 2
\fC\fBMYSQL\fP\fP 
.IP "\(bu" 2
\fC\fBRFC4180\fP\fP 
.IP "\(bu" 2
\fC\fBTDF\fP\fP 
.PP
.PP
For example: 
.PP
.PP
.nf

\fBCSVParser\fP parser = CSVFormat\&.EXCEL\&.parse(reader);
.fi
.PP
.PP
The \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVParser\fP\fP provides static methods to parse other input types, for example: 
.PP
.PP
.nf

\fBCSVParser\fP parser = \fBCSVParser\&.parse\fP(file, StandardCharsets\&.US_ASCII, \fBCSVFormat\&.EXCEL\fP);
.fi
.PP
.PP
.SS "Defining formats"
.PP
You can extend a format by calling the \fC
with\fP
 methods\&. For example: 
.PP
.PP
.nf

CSVFormat\&.EXCEL\&.withNullString("N/A")\&.withIgnoreSurroundingSpaces(true);
.fi
.PP
.PP
.SS "Defining column names"
.PP
To define the column names you want to use to access records, write: 
.PP
.PP
.nf

CSVFormat\&.EXCEL\&.withHeader("Col1", "Col2", "Col3");
.fi
.PP
.PP
Calling \fC\fBwithHeader(String\&.\&.\&.)\fP\fP let's you use the given names to address values in a \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVRecord\fP\fP, and assumes that your CSV source does not contain a first record that also defines column names\&.
.PP
If it does, then you are overriding this metadata with your names and you should skip the first record by calling \fC\fBwithSkipHeaderRecord(boolean)\fP\fP with \fC
true\fP
\&. 
.PP
.SS "Parsing"
.PP
You can use a format directly to parse a reader\&. For example, to parse an Excel file with columns header, write: 
.PP
.PP
.nf

Reader in = \&.\&.\&.;
CSVFormat\&.EXCEL\&.withHeader("Col1", "Col2", "Col3")\&.parse(in);
.fi
.PP
.PP
For other input types, like resources, files, and URLs, use the static methods on \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVParser\fP\fP\&. 
.PP
.SS "Referencing columns safely"
.PP
If your source contains a header record, you can simplify your code and safely reference columns, by using \fC\fBwithHeader(String\&.\&.\&.)\fP\fP with no arguments: 
.PP
.PP
.nf

CSVFormat\&.EXCEL\&.withHeader();
.fi
.PP
.PP
This causes the parser to read the first record and use its values as column names\&.
.PP
Then, call one of the \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVRecord\fP\fP get method that takes a String column name argument: 
.PP
.PP
.nf

String value = record\&.get("Col1");
.fi
.PP
.PP
This makes your code impervious to changes in column order in the CSV file\&. 
.PP
.SS "Notes"
.PP
This class is immutable\&. 
.PP
\fBVersion\fP
.RS 4
.RE
.PP
\fBId\fP
.RS 4
\fBCSVFormat\&.java\fP 1745258 2016-05-23 20:24:33Z ggregory 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.equals (final Object obj)"

.SS "String es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.format (final Object\&.\&.\&. values)"
Formats the specified values\&.
.PP
\fBParameters\fP
.RS 4
\fIvalues\fP the values to format 
.RE
.PP
\fBReturns\fP
.RS 4
the formatted values 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getAllowMissingColumnNames ()"
Specifies whether missing column names are allowed when parsing the header line\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if missing column names are allowed when parsing the header line, \fC
false\fP
 to throw an \fC\fBIllegalArgumentException\fP\fP\&. 
.RE
.PP

.SS "Character es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getCommentMarker ()"
Returns the character marking the start of a line comment\&.
.PP
\fBReturns\fP
.RS 4
the comment start marker, may be \fC
null\fP
 
.RE
.PP

.SS "char es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getDelimiter ()"
Returns the character delimiting the values (typically ';', ',' or '\\t')\&.
.PP
\fBReturns\fP
.RS 4
the delimiter character 
.RE
.PP

.SS "Character es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getEscapeCharacter ()"
Returns the escape character\&.
.PP
\fBReturns\fP
.RS 4
the escape character, may be \fC
null\fP
 
.RE
.PP

.SS "String[] es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getHeader ()"
Returns a copy of the header array\&.
.PP
\fBReturns\fP
.RS 4
a copy of the header array; \fC
null\fP
 if disabled, the empty array if to be read from the file 
.RE
.PP

.SS "String[] es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getHeaderComments ()"
Returns a copy of the header comment array\&.
.PP
\fBReturns\fP
.RS 4
a copy of the header comment array; \fC
null\fP
 if disabled\&. 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getIgnoreEmptyLines ()"
Specifies whether empty lines between records are ignored when parsing input\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if empty lines between records are ignored, \fC
false\fP
 if they are turned into empty records\&. 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getIgnoreHeaderCase ()"
Specifies whether header names will be accessed ignoring case\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if header names cases are ignored, \fC
false\fP
 if they are case sensitive\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getIgnoreSurroundingSpaces ()"
Specifies whether spaces around values are ignored when parsing input\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if spaces around values are ignored, \fC
false\fP
 if they are treated as part of the value\&. 
.RE
.PP

.SS "String es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getNullString ()"
Gets the String to convert to and from \fC
null\fP
\&. 
.PD 0

.IP "\(bu" 2
\fBReading:\fP Converts strings equal to the given \fC
nullString\fP
 to \fC
null\fP
 when reading records\&. 
.IP "\(bu" 2
\fBWriting:\fP Writes \fC
null\fP
 as the given \fC
nullString\fP
 when writing records\&. 
.PP
.PP
\fBReturns\fP
.RS 4
the String to convert to and from \fC
null\fP
\&. No substitution occurs if \fC
null\fP
 
.RE
.PP

.SS "Character es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getQuoteCharacter ()"
Returns the character used to encapsulate values containing special characters\&.
.PP
\fBReturns\fP
.RS 4
the quoteChar character, may be \fC
null\fP
 
.RE
.PP

.SS "\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.QuoteMode\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getQuoteMode ()"
Returns the quote policy output fields\&.
.PP
\fBReturns\fP
.RS 4
the quote policy 
.RE
.PP

.SS "String es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getRecordSeparator ()"
Returns the record separator delimiting output records\&.
.PP
\fBReturns\fP
.RS 4
the record separator 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getSkipHeaderRecord ()"
Returns whether to skip the header record\&.
.PP
\fBReturns\fP
.RS 4
whether to skip the header record\&. 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getTrailingDelimiter ()"
Returns whether to add a trailing delimiter\&.
.PP
\fBReturns\fP
.RS 4
whether to add a trailing delimiter\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.getTrim ()"
Returns whether to trim leading and trailing blanks\&.
.PP
\fBReturns\fP
.RS 4
whether to trim leading and trailing blanks\&. 
.RE
.PP

.SS "int es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.hashCode ()"

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.isCommentMarkerSet ()"
Specifies whether comments are supported by this format\&.
.PP
Note that the comment introducer character is only recognized at the start of a line\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 is comments are supported, \fC
false\fP
 otherwise 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.isEscapeCharacterSet ()"
Returns whether escape are being processed\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if escapes are processed 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.isNullStringSet ()"
Returns whether a nullString has been defined\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if a nullString is defined 
.RE
.PP

.SS "boolean es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.isQuoteCharacterSet ()"
Returns whether a quoteChar has been defined\&.
.PP
\fBReturns\fP
.RS 4
\fC
true\fP
 if a quoteChar is defined 
.RE
.PP

.SS "static \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.newFormat (final char delimiter)\fC [static]\fP"
Creates a new CSV format with the specified delimiter\&.
.PP
Use this method if you want to create a \fBCSVFormat\fP from scratch\&. All fields but the delimiter will be initialized with null/false\&. 
.PP
\fBParameters\fP
.RS 4
\fIdelimiter\fP the char used for value separation, must not be a line break character 
.RE
.PP
\fBReturns\fP
.RS 4
a new CSV format\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP if the delimiter is a line break character
.RE
.PP
\fBSee also\fP
.RS 4
\fBDEFAULT\fP 
.PP
\fBRFC4180\fP 
.PP
\fBMYSQL\fP 
.PP
\fBEXCEL\fP 
.PP
\fBTDF\fP 
.RE
.PP

.SS "\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVParser\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.parse (final Reader in) throws IOException"
Parses the specified content\&.
.PP
See also the various static parse methods on \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVParser\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIin\fP the input stream 
.RE
.PP
\fBReturns\fP
.RS 4
a parser over a stream of \fC\fBCSVRecord\fP\fPs\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIOException\fP If an I/O error occurs 
.RE
.PP

.SS "\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVPrinter\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.print (final Appendable out) throws IOException"
Prints to the specified output\&.
.PP
See also \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVPrinter\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIout\fP the output 
.RE
.PP
\fBReturns\fP
.RS 4
a printer to an output 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIOException\fP thrown if the optional header cannot be printed\&. 
.RE
.PP

.SS "void es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.print (final Object value, final Appendable out, final boolean newRecord) throws IOException"
Prints the \fC
value\fP
 as the next value on the line to \fC
out\fP
\&. The value will be escaped or encapsulated as needed\&. Useful when one wants to avoid creating CSVPrinters\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP value to output\&. 
.br
\fIout\fP where to print the value 
.br
\fInewRecord\fP if this a new record 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIOException\fP If an I/O error occurs 
.RE
.PP
\fBSince\fP
.RS 4
1\&.4 
.RE
.PP

.SS "void es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.println (final Appendable out) throws IOException"
Outputs the record separator\&.
.PP
\fBParameters\fP
.RS 4
\fIout\fP where to write 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIOException\fP If an I/O error occurs 
.RE
.PP
\fBSince\fP
.RS 4
1\&.4 
.RE
.PP

.SS "void es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.printRecord (final Appendable out, final Object\&.\&.\&. values) throws IOException"
Prints the given \fC
values\fP
 to \fC
out\fP
 as a single record of delimiter separated values followed by the record separator\&.
.PP
The values will be quoted if needed\&. Quotes and new-line characters will be escaped\&. This method adds the record separator to the output after printing the record, so there is no need to call \fC\fBprintln(Appendable)\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIout\fP where to write 
.br
\fIvalues\fP values to output\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIOException\fP If an I/O error occurs 
.RE
.PP
\fBSince\fP
.RS 4
1\&.4 
.RE
.PP

.SS "String es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.toString ()"

.SS "static \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.valueOf (final String format)\fC [static]\fP"
Gets one of the predefined formats from \fC\fBCSVFormat\&.Predefined\fP\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIformat\fP name 
.RE
.PP
\fBReturns\fP
.RS 4
one of the predefined formats 
.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withAllowMissingColumnNames ()"
Returns a new \fC
CSVFormat\fP
 with the missing column names behavior of the format set to \fC
true\fP

.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified missing column names behavior\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithAllowMissingColumnNames(boolean)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withAllowMissingColumnNames (final boolean allowMissingColumnNames)"
Returns a new \fC
CSVFormat\fP
 with the missing column names behavior of the format set to the given value\&.
.PP
\fBParameters\fP
.RS 4
\fIallowMissingColumnNames\fP the missing column names behavior, \fC
true\fP
 to allow missing column names in the header line, \fC
false\fP
 to cause an \fC\fBIllegalArgumentException\fP\fP to be thrown\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified missing column names behavior\&. 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withCommentMarker (final char commentMarker)"
Returns a new \fC
CSVFormat\fP
 with the comment start marker of the format set to the specified character\&.
.PP
Note that the comment start character is only recognized at the start of a line\&.
.PP
\fBParameters\fP
.RS 4
\fIcommentMarker\fP the comment start marker 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this one but with the specified character as the comment start marker 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withCommentMarker (final Character commentMarker)"
Returns a new \fC
CSVFormat\fP
 with the comment start marker of the format set to the specified character\&.
.PP
Note that the comment start character is only recognized at the start of a line\&.
.PP
\fBParameters\fP
.RS 4
\fIcommentMarker\fP the comment start marker, use \fC
null\fP
 to disable 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this one but with the specified character as the comment start marker 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withDelimiter (final char delimiter)"
Returns a new \fC
CSVFormat\fP
 with the delimiter of the format set to the specified character\&.
.PP
\fBParameters\fP
.RS 4
\fIdelimiter\fP the delimiter character 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this with the specified character as delimiter 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withEscape (final char escape)"
Returns a new \fC
CSVFormat\fP
 with the escape character of the format set to the specified character\&.
.PP
\fBParameters\fP
.RS 4
\fIescape\fP the escape character 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to his but with the specified character as the escape character 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withEscape (final Character escape)"
Returns a new \fC
CSVFormat\fP
 with the escape character of the format set to the specified character\&.
.PP
\fBParameters\fP
.RS 4
\fIescape\fP the escape character, use \fC
null\fP
 to disable 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified character as the escape character 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withFirstRecordAsHeader ()"
Returns a new \fC
CSVFormat\fP
 using the first record as header\&.
.PP
Calling this method is equivalent to calling: 
.PP
.PP
.nf

\fBCSVFormat\fP format = aFormat\&.withHeader()\&.\fBwithSkipHeaderRecord()\fP;
.fi
.PP
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but using the first record as header\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithSkipHeaderRecord(boolean)\fP 
.PP
\fBwithHeader(String\&.\&.\&.)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withHeader (final Class<? extends Enum<?> > headerEnum)"
Returns a new \fC
CSVFormat\fP
 with the header of the format defined by the enum class\&.
.PP
Example: 
.PP
.PP
.nf

public enum Header {
    Name, Email, Phone
}

\fBCSVFormat\fP format = aformat\&.withHeader(Header\&.class);
.fi
.PP
 <p<blockquote> 
.PP
The header is also used by the \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVPrinter\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIheaderEnum\fP the enum defining the header, \fC
null\fP
 if disabled, empty if parsed automatically, user specified otherwise\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified header 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithHeader(String\&.\&.\&.)\fP 
.PP
\fBwithSkipHeaderRecord(boolean)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withHeader (final ResultSet resultSet) throws SQLException"
Returns a new \fC
CSVFormat\fP
 with the header of the format set from the result set metadata\&. The header can either be parsed automatically from the input file with:
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeader();
.fi
.PP
.PP
or specified manually with:
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeader(resultSet);
.fi
.PP
 <p<blockquote> 
.PP
The header is also used by the \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVPrinter\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIresultSet\fP the resultSet for the header, \fC
null\fP
 if disabled, empty if parsed automatically, user specified otherwise\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified header 
.RE
.PP
\fBExceptions\fP
.RS 4
\fISQLException\fP SQLException if a database access error occurs or this method is called on a closed result set\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withHeader (final ResultSetMetaData metaData) throws SQLException"
Returns a new \fC
CSVFormat\fP
 with the header of the format set from the result set metadata\&. The header can either be parsed automatically from the input file with:
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeader();
.fi
.PP
.PP
or specified manually with:
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeader(metaData);
.fi
.PP
 <p<blockquote> 
.PP
The header is also used by the \fC\fBes\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVPrinter\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fImetaData\fP the metaData for the header, \fC
null\fP
 if disabled, empty if parsed automatically, user specified otherwise\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified header 
.RE
.PP
\fBExceptions\fP
.RS 4
\fISQLException\fP SQLException if a database access error occurs or this method is called on a closed result set\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withHeader (final String\&.\&.\&. header)"
Returns a new \fC
CSVFormat\fP
 with the header of the format set to the given values\&. The header can either be parsed automatically from the input file with:
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeader();
.fi
.PP
.PP
or specified manually with:
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeader("name", "email", "phone");
.fi
.PP
 <p<blockquote> 
.PP
The header is also used by the \fC\fBCSVPrinter\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIheader\fP the header, \fC
null\fP
 if disabled, empty if parsed automatically, user specified otherwise\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified header 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithSkipHeaderRecord(boolean)\fP 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withHeaderComments (final Object\&.\&.\&. headerComments)"
Returns a new \fC
CSVFormat\fP
 with the header comments of the format set to the given values\&. The comments will be printed first, before the headers\&. This setting is ignored by the parser\&.
.PP
.PP
.nf

\fBCSVFormat\fP format = aformat\&.withHeaderComments("Generated by Apache Commons CSV 1\&.1\&.", new Date());
.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIheaderComments\fP the headerComments which will be printed by the Printer before the actual CSV data\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified header 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithSkipHeaderRecord(boolean)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withIgnoreEmptyLines ()"
Returns a new \fC
CSVFormat\fP
 with the empty line skipping behavior of the format set to \fC
true\fP
\&.
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified empty line skipping behavior\&. 
.RE
.PP
\fBSince\fP
.RS 4
\fC\fBwithIgnoreEmptyLines(boolean)\fP\fP 
.PP
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withIgnoreEmptyLines (final boolean ignoreEmptyLines)"
Returns a new \fC
CSVFormat\fP
 with the empty line skipping behavior of the format set to the given value\&.
.PP
\fBParameters\fP
.RS 4
\fIignoreEmptyLines\fP the empty line skipping behavior, \fC
true\fP
 to ignore the empty lines between the records, \fC
false\fP
 to translate empty lines to empty records\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified empty line skipping behavior\&. 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withIgnoreHeaderCase ()"
Returns a new \fC
CSVFormat\fP
 with the header ignore case behavior set to \fC
true\fP
\&.
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that will ignore case header name\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithIgnoreHeaderCase(boolean)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withIgnoreHeaderCase (final boolean ignoreHeaderCase)"
Returns a new \fC
CSVFormat\fP
 with whether header names should be accessed ignoring case\&.
.PP
\fBParameters\fP
.RS 4
\fIignoreHeaderCase\fP the case mapping behavior, \fC
true\fP
 to access name/values, \fC
false\fP
 to leave the mapping as is\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that will ignore case header name if specified as \fC
true\fP
 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withIgnoreSurroundingSpaces ()"
Returns a new \fC
CSVFormat\fP
 with the trimming behavior of the format set to \fC
true\fP
\&.
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified trimming behavior\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithIgnoreSurroundingSpaces(boolean)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withIgnoreSurroundingSpaces (final boolean ignoreSurroundingSpaces)"
Returns a new \fC
CSVFormat\fP
 with the trimming behavior of the format set to the given value\&.
.PP
\fBParameters\fP
.RS 4
\fIignoreSurroundingSpaces\fP the trimming behavior, \fC
true\fP
 to remove the surrounding spaces, \fC
false\fP
 to leave the spaces as is\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified trimming behavior\&. 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withNullString (final String nullString)"
Returns a new \fC
CSVFormat\fP
 with conversions to and from null for strings on input and output\&. 
.PD 0

.IP "\(bu" 2
\fBReading:\fP Converts strings equal to the given \fC
nullString\fP
 to \fC
null\fP
 when reading records\&. 
.IP "\(bu" 2
\fBWriting:\fP Writes \fC
null\fP
 as the given \fC
nullString\fP
 when writing records\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fInullString\fP the String to convert to and from \fC
null\fP
\&. No substitution occurs if \fC
null\fP

.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified null conversion string\&. 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withQuote (final char quoteChar)"
Returns a new \fC
CSVFormat\fP
 with the quoteChar of the format set to the specified character\&.
.PP
\fBParameters\fP
.RS 4
\fIquoteChar\fP the quoteChar character 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified character as quoteChar 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withQuote (final Character quoteChar)"
Returns a new \fC
CSVFormat\fP
 with the quoteChar of the format set to the specified character\&.
.PP
\fBParameters\fP
.RS 4
\fIquoteChar\fP the quoteChar character, use \fC
null\fP
 to disable 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified character as quoteChar 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP thrown if the specified character is a line break 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withQuoteMode (final \fBQuoteMode\fP quoteModePolicy)"
Returns a new \fC
CSVFormat\fP
 with the output quote policy of the format set to the specified value\&.
.PP
\fBParameters\fP
.RS 4
\fIquoteModePolicy\fP the quote policy to use for output\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified quote policy 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withRecordSeparator (final char recordSeparator)"
Returns a new \fC
CSVFormat\fP
 with the record separator of the format set to the specified character\&.
.PP
\fBNote:\fP This setting is only used during printing and does not affect parsing\&. Parsing currently only works for inputs with '
.br
', '\\r' and '\\r\\n' 
.PP
\fBParameters\fP
.RS 4
\fIrecordSeparator\fP the record separator to use for output\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the the specified output record separator 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withRecordSeparator (final String recordSeparator)"
Returns a new \fC
CSVFormat\fP
 with the record separator of the format set to the specified String\&.
.PP
\fBNote:\fP This setting is only used during printing and does not affect parsing\&. Parsing currently only works for inputs with '
.br
', '\\r' and '\\r\\n' 
.PP
\fBParameters\fP
.RS 4
\fIrecordSeparator\fP the record separator to use for output\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the the specified output record separator 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP if recordSeparator is none of CR, LF or CRLF 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withSkipHeaderRecord ()"
Returns a new \fC
CSVFormat\fP
 with skipping the header record set to \fC
true\fP
\&.
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the the specified skipHeaderRecord setting\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithSkipHeaderRecord(boolean)\fP 
.PP
\fBwithHeader(String\&.\&.\&.)\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.1 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withSkipHeaderRecord (final boolean skipHeaderRecord)"
Returns a new \fC
CSVFormat\fP
 with whether to skip the header record\&.
.PP
\fBParameters\fP
.RS 4
\fIskipHeaderRecord\fP whether to skip the header record\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the the specified skipHeaderRecord setting\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwithHeader(String\&.\&.\&.)\fP 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withTrailingDelimiter ()"
Returns a new \fC
CSVFormat\fP
 to add a trailing delimiter\&.
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the trailing delimiter setting\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withTrailingDelimiter (final boolean trailingDelimiter)"
Returns a new \fC
CSVFormat\fP
 with whether to add a trailing delimiter\&.
.PP
\fBParameters\fP
.RS 4
\fItrailingDelimiter\fP whether to add a trailing delimiter\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified trailing delimiter setting\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withTrim ()"
Returns a new \fC
CSVFormat\fP
 to trim leading and trailing blanks\&.
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the trim setting on\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "\fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.withTrim (final boolean trim)"
Returns a new \fC
CSVFormat\fP
 with whether to trim leading and trailing blanks\&.
.PP
\fBParameters\fP
.RS 4
\fItrim\fP whether to trim leading and trailing blanks\&.
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBCSVFormat\fP that is equal to this but with the specified trim setting\&. 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.DEFAULT\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,
            null, null, null, false, false, false, false, false)
.fi
Standard comma separated format, as for \fC\fBRFC4180\fP\fP but allowing empty lines\&.
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
withDelimiter(',') 
.IP "\(bu" 2
withQuote(''') 
.IP "\(bu" 2
withRecordSeparator('\\r\\n') 
.IP "\(bu" 2
withIgnoreEmptyLines(true) 
.PP
.PP
\fBSee also\fP
.RS 4
\fBPredefined::Default\fP 
.RE
.PP

.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.EXCEL = DEFAULT\&.withIgnoreEmptyLines(false)\&.\fBwithAllowMissingColumnNames\fP()\fC [static]\fP"
Excel file format (using a comma as the value delimiter)\&. Note that the actual value delimiter used by Excel is locale dependent, it might be necessary to customize this format to accommodate to your regional settings\&.
.PP
For example for parsing or generating a CSV file on a French system the following format will be used: 
.PP
.PP
.nf

\fBCSVFormat\fP fmt = CSVFormat\&.EXCEL\&.withDelimiter(';');
.fi
.PP
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
\fC\fBwithDelimiter(',')\fP\fP 
.IP "\(bu" 2
\fC\fBwithQuote(''')\fP\fP 
.IP "\(bu" 2
\fC\fBwithRecordSeparator('\\r\\n')\fP\fP 
.IP "\(bu" 2
\fC\fBwithIgnoreEmptyLines(false)\fP\fP 
.IP "\(bu" 2
\fC\fBwithAllowMissingColumnNames(true)\fP\fP 
.PP
.PP
Note: this is currently like \fC\fBRFC4180\fP\fP plus \fC\fBwithAllowMissingColumnNames(true)\fP\fP\&. 
.PP
\fBSee also\fP
.RS 4
\fBPredefined::Excel\fP 
.RE
.PP

.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.INFORMIX_UNLOAD\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= DEFAULT\&.withDelimiter(PIPE)\&.withEscape(BACKSLASH)
            \&.withQuote(DOUBLE_QUOTE_CHAR)\&.withRecordSeparator(LF)
.fi
Default Informix CSV UNLOAD format used by the \fC
UNLOAD TO file_name\fP
 operation\&.
.PP
This is a comma-delimited format with a LF character as the line separator\&. Values are not quoted and special characters are escaped with \fC
'\\'\fP
\&. The default NULL string is \fC
'\\\\N'\fP
\&. 
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
withDelimiter(',') 
.IP "\(bu" 2
withQuote('\\'') 
.IP "\(bu" 2
withRecordSeparator('
.br
') 
.IP "\(bu" 2
withEscape('\\') 
.PP
.PP
\fBSee also\fP
.RS 4
\fBPredefined::MySQL\fP 
.PP
\fChttp://www\&.ibm\&.com/support/knowledgecenter/SSBJG3_2\&.5\&.0/com\&.ibm\&.gen_busug\&.doc/c_fgl_InOutSql_UNLOAD\&.htm\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.INFORMIX_UNLOAD_CSV\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= DEFAULT\&.withDelimiter(COMMA)\&.withQuote(DOUBLE_QUOTE_CHAR)
            \&.withRecordSeparator(LF)
.fi
Default Informix CSV UNLOAD format used by the \fC
UNLOAD TO file_name\fP
 operation (escaping is disabled\&.)
.PP
This is a comma-delimited format with a LF character as the line separator\&. Values are not quoted and special characters are escaped with \fC
'\\'\fP
\&. The default NULL string is \fC
'\\\\N'\fP
\&. 
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
withDelimiter(',') 
.IP "\(bu" 2
withQuote('\\'') 
.IP "\(bu" 2
withRecordSeparator('
.br
') 
.PP
.PP
\fBSee also\fP
.RS 4
\fBPredefined::MySQL\fP 
.PP
\fChttp://www\&.ibm\&.com/support/knowledgecenter/SSBJG3_2\&.5\&.0/com\&.ibm\&.gen_busug\&.doc/c_fgl_InOutSql_UNLOAD\&.htm\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.3 
.RE
.PP

.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.MYSQL\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= DEFAULT\&.withDelimiter(TAB)\&.withEscape(BACKSLASH)\&.withIgnoreEmptyLines(false)
            \&.withQuote(null)\&.withRecordSeparator(LF)\&.withNullString("\\N")
.fi
Default MySQL format used by the \fC
SELECT INTO OUTFILE\fP
 and \fC
LOAD DATA INFILE\fP
 operations\&.
.PP
This is a tab-delimited format with a LF character as the line separator\&. Values are not quoted and special characters are escaped with \fC
'\\'\fP
\&. The default NULL string is \fC
'\\\\N'\fP
\&. 
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
withDelimiter('\\t') 
.IP "\(bu" 2
withQuote(null) 
.IP "\(bu" 2
withRecordSeparator('
.br
') 
.IP "\(bu" 2
withIgnoreEmptyLines(false) 
.IP "\(bu" 2
withEscape('\\') 
.IP "\(bu" 2
withNullString('\\\\N') 
.PP
.PP
\fBSee also\fP
.RS 4
\fBPredefined::MySQL\fP 
.PP
\fChttp://dev\&.mysql\&.com/doc/refman/5\&.1/en/load -data\&.html\fP 
.RE
.PP

.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.RFC4180 = DEFAULT\&.withIgnoreEmptyLines(false)\fC [static]\fP"
Comma separated format as defined by \fCRFC 4180\fP\&.
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
withDelimiter(',') 
.IP "\(bu" 2
withQuote(''') 
.IP "\(bu" 2
withRecordSeparator('\\r\\n') 
.IP "\(bu" 2
withIgnoreEmptyLines(false) 
.PP
.PP
\fBSee also\fP
.RS 4
\fBPredefined::RFC4180\fP 
.RE
.PP

.SS "final \fBCSVFormat\fP es\&.apachecsv\&.org\&.apache\&.commons\&.csv\&.CSVFormat\&.TDF = DEFAULT\&.withDelimiter(TAB)\&.\fBwithIgnoreSurroundingSpaces\fP()\fC [static]\fP"
Tab-delimited format\&.
.PP
Settings are: 
.PP
.PD 0
.IP "\(bu" 2
withDelimiter('\\t') 
.IP "\(bu" 2
withQuote(''') 
.IP "\(bu" 2
withRecordSeparator('\\r\\n') 
.IP "\(bu" 2
withIgnoreSurroundingSpaces(true) 
.PP
.PP
\fBSee also\fP
.RS 4
\fBPredefined::TDF\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for ProyectoFinalLDH from the source code\&.
