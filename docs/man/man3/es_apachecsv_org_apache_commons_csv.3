.TH "es.apachecsv.org.apache.commons.csv" 3 "Thu Dec 29 2022" "Version 1.0" "ProyectoFinalLDH" \" -*- nroff -*-
.ad l
.nh
.SH NAME
es.apachecsv.org.apache.commons.csv
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAssertions\fP"
.br
.ti -1c
.RI "class \fBConstants\fP"
.br
.ti -1c
.RI "class \fBCSVFormat\fP"
.br
.ti -1c
.RI "class \fBCSVParser\fP"
.br
.ti -1c
.RI "class \fBCSVPrinter\fP"
.br
.ti -1c
.RI "class \fBCSVRecord\fP"
.br
.ti -1c
.RI "class \fBExtendedBufferedReader\fP"
.br
.ti -1c
.RI "class \fBLexer\fP"
.br
.ti -1c
.RI "enum \fBQuoteMode\fP"
.br
.ti -1c
.RI "class \fBToken\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Apache Commons CSV Format Support\&.
.PP
CSV are widely used as interfaces to legacy systems or manual data-imports\&. CSV stands for 'Comma Separated Values' (or sometimes 'Character Separated
   Values')\&. The CSV data format is defined in \fCRFC 4180\fP but many dialects exist\&.
.PP
Common to all file dialects is its basic structure: The CSV data-format is record oriented, whereas each record starts on a new textual line\&. A record is build of a list of values\&. Keep in mind that not all records must have an equal number of values:
.PP
.PP
.nf

      csv    := records*
      record := values*
.fi
.PP
.PP
The following list contains the CSV aspects the Commons CSV parser supports:
.PP
.IP "\fBSeparators (for lines) \fP" 1c
The record separators are hardcoded and cannot be changed\&. The must be '\\r', '
.br
' or '\\r
.br
'\&.
.PP
.IP "\fBDelimiter (for values) \fP" 1c
The delimiter for values is freely configurable (default ',')\&.
.PP
.IP "\fBComments \fP" 1c
Some CSV-dialects support a simple comment syntax\&. A comment is a record which must start with a designated character (the commentStarter)\&. A record of this kind is treated as comment and gets removed from the input (default none)
.PP
.IP "\fBEncapsulator \fP" 1c
Two encapsulator characters (default ''') are used to enclose -> complex values\&.
.PP
.IP "\fBSimple values \fP" 1c
A simple value consist of all characters (except the delimiter) until (but not including) the next delimiter or a record-terminator\&. Optionally all surrounding whitespaces of a simple value can be ignored (default: true)\&.
.PP
.IP "\fBComplex values \fP" 1c
Complex values are encapsulated within a pair of the defined encapsulator characters\&. The encapsulator itself must be escaped or doubled when used inside complex values\&. Complex values preserve all kind of formatting (including newlines -> multiline-values)
.PP
.IP "\fBEmpty line skipping \fP" 1c
Optionally empty lines in CSV files can be skipped\&. Otherwise, empty lines will return a record with a single empty value\&. 
.PP
.PP
In addition to individually defined dialects, two predefined dialects (strict-csv, and excel-csv) can be set directly\&.
.PP
Example usage:
.PP
.RS 4
.PP
.nf

Reader in = new StringReader('a,b,c');
for (\fBCSVRecord\fP record : CSVFormat\&.DEFAULT\&.parse(in)) {
    for (String field : record) {
        System\&.out\&.print('\\'' + field + '\\', ');
    }
    System\&.out\&.println();
}
.fi
.PP
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ProyectoFinalLDH from the source code\&.
