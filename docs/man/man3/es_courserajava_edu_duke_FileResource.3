.TH "es.courserajava.edu.duke.FileResource" 3 "Thu Dec 29 2022" "Version 1.0" "ProyectoFinalLDH" \" -*- nroff -*-
.ad l
.nh
.SH NAME
es.courserajava.edu.duke.FileResource
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFileResource\fP ()"
.br
.ti -1c
.RI "\fBFileResource\fP (File file)"
.br
.ti -1c
.RI "\fBFileResource\fP (String filename)"
.br
.ti -1c
.RI "\fBFileResource\fP (boolean writable)"
.br
.ti -1c
.RI "\fBFileResource\fP (File file, boolean writable)"
.br
.ti -1c
.RI "\fBFileResource\fP (String filename, boolean writable)"
.br
.ti -1c
.RI "Iterable< String > \fBlines\fP ()"
.br
.ti -1c
.RI "Iterable< String > \fBwords\fP ()"
.br
.ti -1c
.RI "String \fBasString\fP ()"
.br
.ti -1c
.RI "\fBCSVParser\fP \fBgetCSVParser\fP ()"
.br
.ti -1c
.RI "\fBCSVParser\fP \fBgetCSVParser\fP (boolean withHeader)"
.br
.ti -1c
.RI "\fBCSVParser\fP \fBgetCSVParser\fP (boolean withHeader, String delimiter)"
.br
.ti -1c
.RI "Iterable< String > \fBgetCSVHeaders\fP (\fBCSVParser\fP parser)"
.br
.ti -1c
.RI "void \fBwrite\fP (String s)"
.br
.ti -1c
.RI "void \fBwrite\fP (\fBStorageResource\fP list)"
.br
.ti -1c
.RI "void \fBwrite\fP (String[] list)"
.br
.ti -1c
.RI "void \fBwrite\fP (ArrayList< String > list)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fC\fBFileResource\fP\fP class represents a file and allows access to its contents a line at a time, using the method \fClines\fP, or a word at a time, using the method \fCwords\fP\&. These strings can then be iterated over using a \fCfor\fP loop\&.
.PP
Example usage:
.PP
.PP
.nf

\fBFileResource\fP fr = new \fBFileResource()\fP;
for (String s : fr\&.words()) {
    // print or process s
}
.fi
.PP
.PP
If each line of the file represents separated data values, because its a CSV file, then the user can get a \fCgetCSVParser\fP object to access that data more directly, using one of the \fCgetCSVParser\fP methods\&.
.PP
Example CSV usage:
.PP
.PP
.nf

\fBFileResource\fP fr = new \fBFileResource\fP('food\&.csv');
for (CSVRecord record : fr\&.getCSVParser()) {
    // print or process fields in record
    String name = record\&.get('Name');
    // other processing
}
.fi
.PP
.PP
This software is licensed with an Apache 2 license, see http://www.apache.org/licenses/LICENSE-2.0 for details\&.
.PP
\fBAuthor\fP
.RS 4
Duke Software Team 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "es\&.courserajava\&.edu\&.duke\&.FileResource\&.FileResource ()"
Create a \fC\fBFileResource\fP\fP object that opens the file chosen by the user using a file selection dialog box\&.
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if no file is selected by the user 
.RE
.PP

.SS "es\&.courserajava\&.edu\&.duke\&.FileResource\&.FileResource (File file)"
Create a \fC\fBFileResource\fP\fP object that opens a file represented by the File object passed as a parameter\&.
.PP
Useful, for example, when used in conjunction with the \fCDirectoryResource\fP class\&.
.PP
\fBParameters\fP
.RS 4
\fIfile\fP the file to be represented by this resource 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if the file cannot be accessed 
.RE
.PP

.SS "es\&.courserajava\&.edu\&.duke\&.FileResource\&.FileResource (String filename)"
Create a \fC\fBFileResource\fP\fP object that opens a file whose name is passed as a parameter\&.
.PP
The named file should be on the current class path to be found\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP the name of the file to be opened 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if the filename cannot be accessed 
.RE
.PP

.SS "es\&.courserajava\&.edu\&.duke\&.FileResource\&.FileResource (boolean writable)"
Create a \fC\fBFileResource\fP\fP object that opens the file chosen by the user using a file selection dialog box, possibly to write to it\&.
.PP
If the user wants to change the contents of the open file by using the method \fCwrite\fP to add new strings to it, pass \fCtrue\fP as the second parameter\&. Otherwise it is assumed the user will only iterate over the existing contents of the file\&.
.PP
\fBParameters\fP
.RS 4
\fIwritable\fP allow changes to this file only if true 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if no file is selected by the user 
.RE
.PP

.SS "es\&.courserajava\&.edu\&.duke\&.FileResource\&.FileResource (File file, boolean writable)"
Create a \fC\fBFileResource\fP\fP object that opens a file represented by the File object passed as a parameter, possibly to write to it\&.
.PP
If the user wants to change the contents of the open file by using the method \fCwrite\fP to add new strings to it, pass \fCtrue\fP as the second parameter\&. Otherwise it is assumed the user will only iterate over the existing contents of the file\&.
.PP
Useful, for example, when used in conjunction with the \fCDirectoryResource\fP class\&.
.PP
\fBParameters\fP
.RS 4
\fIfile\fP the file to be represented by this resource 
.br
\fIwritable\fP allow changes to this file only if true 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if the file cannot be accessed 
.RE
.PP

.SS "es\&.courserajava\&.edu\&.duke\&.FileResource\&.FileResource (String filename, boolean writable)"
Create a \fC\fBFileResource\fP\fP object that opens a file whose name is passed as a parameter, possibly to write to it\&.
.PP
If the user wants to change the contents of the open file by using the method \fCwrite\fP to add new strings to it, pass \fCtrue\fP as the second parameter\&. Otherwise it is assumed the user will only iterate over the existing contents of the file\&.
.PP
The named file should be on the current class path to be found\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP the name of the file to be opened 
.br
\fIwritable\fP allow changes to this file only if true 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if the filename cannot be accessed 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "String es\&.courserajava\&.edu\&.duke\&.FileResource\&.asString ()"
Return entire contents of this opened file as one string\&.
.PP
\fBReturns\fP
.RS 4
a \fCString\fP that is the contents of the open file 
.RE
.PP

.SS "Iterable< String > es\&.courserajava\&.edu\&.duke\&.FileResource\&.getCSVHeaders (\fBCSVParser\fP parser)"
Allows access to the column names of the header row of a CSV file (the first line in the file) one at a time\&. If the CSV file did not have a header row, then an empty \fCIterator\fP is returned\&.
.PP
\fBParameters\fP
.RS 4
\fIparser\fP the \fCCSVParser\fP that has been created for this file 
.RE
.PP
\fBReturns\fP
.RS 4
an \fCIterable\fP that allows access one header name at a time 
.RE
.PP

.SS "\fBCSVParser\fP es\&.courserajava\&.edu\&.duke\&.FileResource\&.getCSVParser ()"
Returns a \fCCSVParser\fP object to access the contents of an open file\&.
.PP
Each line of the file should be formatted as data separated by commas and with a header row to describe the column names\&.
.PP
\fBReturns\fP
.RS 4
a \fCCSVParser\fP that can provide access to the records in the file one at a time 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if this file does not represent a CSV formatted data 
.RE
.PP

.SS "\fBCSVParser\fP es\&.courserajava\&.edu\&.duke\&.FileResource\&.getCSVParser (boolean withHeader)"
Returns a \fCCSVParser\fP object to access the contents of an open file, possibly without a header row\&.
.PP
Each line of the file should be formatted as data separated by commas and with/without a header row to describe the column names\&.
.PP
\fBParameters\fP
.RS 4
\fIwithHeader\fP uses first row of data as a header row only if true 
.RE
.PP
\fBReturns\fP
.RS 4
a \fCCSVParser\fP that can provide access to the records in the file one at a time 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if this file does not represent a CSV formatted data 
.RE
.PP

.SS "\fBCSVParser\fP es\&.courserajava\&.edu\&.duke\&.FileResource\&.getCSVParser (boolean withHeader, String delimiter)"
Returns a \fCCSVParser\fP object to access the contents of an open file, possibly without a header row and a different data delimiter than a comma\&.
.PP
Each line of the file should be formatted as data separated by the delimiter passed as a parameter and with/without a header row to describe the column names\&. This is useful if the data is separated by some character other than a comma\&.
.PP
\fBParameters\fP
.RS 4
\fIwithHeader\fP uses first row of data as a header row only if true 
.br
\fIdelimiter\fP a single character that separates one field of data from another 
.RE
.PP
\fBReturns\fP
.RS 4
a \fCCSVParser\fP that can provide access to the records in the file one at a time 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBResourceException\fP\fP if this file does not represent a CSV formatted data 
.br
\fI\fBResourceException\fP\fP if \fCdelimiter\&.length() != 1\fP 
.RE
.PP

.SS "Iterable< String > es\&.courserajava\&.edu\&.duke\&.FileResource\&.lines ()"
Allow access to this opened file one line at a time\&.
.PP
\fBReturns\fP
.RS 4
an \fCIterable\fP that will allow access to contents of opened file one line at a time\&. 
.RE
.PP

.SS "Iterable< String > es\&.courserajava\&.edu\&.duke\&.FileResource\&.words ()"
Allow access to this opened file one word at a time, where words are separated by white-space\&. This means any form of spaces, like tabs or newlines, can delimit words\&.
.PP
\fBReturns\fP
.RS 4
an \fCIterable\fP that will allow access to contents of opened file one word at a time\&. 
.RE
.PP

.SS "void es\&.courserajava\&.edu\&.duke\&.FileResource\&.write (ArrayList< String > list)"
Writes a list of strings to the end of this file, one element per line\&.
.PP
\fBParameters\fP
.RS 4
\fIlist\fP the strings to saved to the file 
.RE
.PP

.SS "void es\&.courserajava\&.edu\&.duke\&.FileResource\&.write (\fBStorageResource\fP list)"
Writes a list of strings to the end of this file, one element per line\&.
.PP
\fBParameters\fP
.RS 4
\fIlist\fP the strings to saved to the file 
.RE
.PP

.SS "void es\&.courserajava\&.edu\&.duke\&.FileResource\&.write (String s)"
Writes a string to the end of this file\&.
.PP
\fBParameters\fP
.RS 4
\fIs\fP the string to saved to the file 
.RE
.PP

.SS "void es\&.courserajava\&.edu\&.duke\&.FileResource\&.write (String[] list)"
Writes a list of strings to the end of this file, one element per line\&.
.PP
\fBParameters\fP
.RS 4
\fIlist\fP the strings to saved to the file 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for ProyectoFinalLDH from the source code\&.
